"use strict";

import { isStyleDescriptorArray } from "react-native-css/utilities";
import { shorthandHandler } from "../shorthands/_handler.js";
export const blur = (resolveValue, value) => {
  const args = resolveValue(value[2]);
  return {
    blur: Array.isArray(args) ? args[0] : args
  };
};
export const brightness = (resolveValue, value) => {
  const args = resolveValue(value[2]);
  return {
    brightness: Array.isArray(args) ? args[0] : args
  };
};
export const contrast = (resolveValue, value) => {
  const args = resolveValue(value[2]);
  return {
    contrast: Array.isArray(args) ? args[0] : args
  };
};
export const grayscale = (resolveValue, value) => {
  const args = resolveValue(value[2]);
  return {
    grayscale: Array.isArray(args) ? args[0] : args
  };
};
export const hueRotate = (resolveValue, value) => {
  const args = resolveValue(value[2]);
  return {
    hueRotate: Array.isArray(args) ? args[0] : args
  };
};
export const invert = (resolveValue, value) => {
  const args = resolveValue(value[2]);
  return {
    invert: Array.isArray(args) ? args[0] : args
  };
};
export const sepia = (resolveValue, value) => {
  const args = resolveValue(value[2]);
  return {
    sepia: Array.isArray(args) ? args[0] : args
  };
};
export const saturate = (resolveValue, value) => {
  const args = resolveValue(value[2]);
  return {
    saturate: Array.isArray(args) ? args[0] : args
  };
};
export const opacity = (resolveValue, value) => {
  const args = resolveValue(value[2]);
  return {
    hueRotate: Array.isArray(args) ? args[0] : args
  };
};
const color = ["color", "string"];
const offsetX = ["offsetX", "number"];
const offsetY = ["offsetY", "number"];
const blurRadius = ["blurRadius", "number"];
const handler = shorthandHandler([[offsetX, offsetY, blurRadius, color], [color, offsetX, offsetY], [color, offsetX, offsetY, blurRadius], [offsetX, offsetY, color], [offsetX, offsetY, blurRadius, color]], [], "object");
export const dropShadow = (resolveValue, func, get, options) => {
  const args = resolveValue(func[2]);
  return isStyleDescriptorArray(args) ? {
    dropShadow: handler(resolveValue, args, get, options)
  } : undefined;
};
//# sourceMappingURL=filters.js.map