"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sepia = exports.saturate = exports.opacity = exports.invert = exports.hueRotate = exports.grayscale = exports.dropShadow = exports.contrast = exports.brightness = exports.blur = void 0;
var _utilities = require("react-native-css/utilities");
var _handler = require("../shorthands/_handler.js");
const blur = (resolveValue, value) => {
  const args = resolveValue(value[2]);
  return {
    blur: Array.isArray(args) ? args[0] : args
  };
};
exports.blur = blur;
const brightness = (resolveValue, value) => {
  const args = resolveValue(value[2]);
  return {
    brightness: Array.isArray(args) ? args[0] : args
  };
};
exports.brightness = brightness;
const contrast = (resolveValue, value) => {
  const args = resolveValue(value[2]);
  return {
    contrast: Array.isArray(args) ? args[0] : args
  };
};
exports.contrast = contrast;
const grayscale = (resolveValue, value) => {
  const args = resolveValue(value[2]);
  return {
    grayscale: Array.isArray(args) ? args[0] : args
  };
};
exports.grayscale = grayscale;
const hueRotate = (resolveValue, value) => {
  const args = resolveValue(value[2]);
  return {
    hueRotate: Array.isArray(args) ? args[0] : args
  };
};
exports.hueRotate = hueRotate;
const invert = (resolveValue, value) => {
  const args = resolveValue(value[2]);
  return {
    invert: Array.isArray(args) ? args[0] : args
  };
};
exports.invert = invert;
const sepia = (resolveValue, value) => {
  const args = resolveValue(value[2]);
  return {
    sepia: Array.isArray(args) ? args[0] : args
  };
};
exports.sepia = sepia;
const saturate = (resolveValue, value) => {
  const args = resolveValue(value[2]);
  return {
    saturate: Array.isArray(args) ? args[0] : args
  };
};
exports.saturate = saturate;
const opacity = (resolveValue, value) => {
  const args = resolveValue(value[2]);
  return {
    hueRotate: Array.isArray(args) ? args[0] : args
  };
};
exports.opacity = opacity;
const color = ["color", "string"];
const offsetX = ["offsetX", "number"];
const offsetY = ["offsetY", "number"];
const blurRadius = ["blurRadius", "number"];
const handler = (0, _handler.shorthandHandler)([[offsetX, offsetY, blurRadius, color], [color, offsetX, offsetY], [color, offsetX, offsetY, blurRadius], [offsetX, offsetY, color], [offsetX, offsetY, blurRadius, color]], [], "object");
const dropShadow = (resolveValue, func, get, options) => {
  const args = resolveValue(func[2]);
  return (0, _utilities.isStyleDescriptorArray)(args) ? {
    dropShadow: handler(resolveValue, args, get, options)
  } : undefined;
};
exports.dropShadow = dropShadow;
//# sourceMappingURL=filters.js.map