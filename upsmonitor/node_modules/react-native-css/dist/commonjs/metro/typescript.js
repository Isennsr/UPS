"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setupTypeScript = setupTypeScript;
var _fs = require("fs");
var _commentJson = require("comment-json");
var _picocolors = require("./picocolors.js");
/* eslint-disable */

function setupTypeScript(envPath = "react-native-css-env.d.ts", name = "react-native-css") {
  try {
    const ts = require("typescript");
    if (!ts) {
      return;
    }
    const configFileName = ts.findConfigFile("./", ts.sys.fileExists, "tsconfig.json");
    const userConfig = (0, _commentJson.parse)((0, _fs.readFileSync)(configFileName, {
      encoding: "utf-8"
    }));
    if (typeof userConfig !== "object" || !userConfig || Array.isArray(userConfig)) {
      return;
    }
    const output = [];
    let updatedConfig = false;
    if (!(0, _fs.existsSync)(envPath)) {
      (0, _fs.writeFileSync)(envPath, `/// <reference types="react-native-css/types" />

// NOTE: This file should not be edited and should be committed with your source code. It is generated by ${name}. If you need to move or disable this file, please see the documentation.`);
      output.push(`Created ${(0, _picocolors.cyan)(envPath)}`);
    }
    userConfig.include ??= new _commentJson.CommentArray(envPath);
    if (Array.isArray(userConfig.include) && !userConfig.include.includes(envPath)) {
      userConfig.include.push(envPath);
      updatedConfig = true;
      output.push(`Updated ${configFileName} to include the ${(0, _picocolors.cyan)(envPath)} file`);
    }
    if (updatedConfig) {
      (0, _fs.writeFileSync)(configFileName, (0, _commentJson.stringify)(userConfig, null, 2));
    }
    if (output.length) {
      console.log(`${(0, _picocolors.cyan)((0, _picocolors.bold)("NativeWind"))} made the following changes to your project to support TypeScript:\n  - ${output.join("\n  - ")}`);
    }
  } catch {}
}
//# sourceMappingURL=typescript.js.map